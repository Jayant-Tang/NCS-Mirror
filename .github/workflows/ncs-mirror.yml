name: Gitee repos mirror periodic job for NCS
on:
  push:
  #每天北京时间早上七点运行
  #schedule:  
  #- cron: '0 23 * * *'
env:
  PYTHON_VER: 3.8
  GITEE_USER: jayant97
  GITEE_TOKEN: ${{ secrets.GITEE_API_TOKEN }}
  GITEE_PRI: ${{ secrets.GITEE_SSH_PRV }}
  GIT_USER: Jayant.Tang
  GIT_EMAIL: jayant.tang@nordicsemi.no

jobs:

  get-list:
    name: Get all release tags in sdk-nrf, and a URL list of all the repos in every single release version of NCS.
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Python version ${{ env.PYTHON_VER }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VER }}
    
    - name: install dependencies
      run: |
        pip3 install --user west
        export PATH=~/.local/bin:"$PATH"
        sudo apt-get install -y jq

    - name: Get all release tags in sdk-nrf
      id: process-nrf-tags
      run: |
        mkdir -p sdk-nrf
        cd sdk-nrf
        git init
        git remote add origin https://github.com/nrfconnect/sdk-nrf.git
        git ls-remote --tags origin | awk '{print $2}' | sed -e "s#^refs/tags/##" | grep -E "^v[1-9]+\.[0-9]+\.[0-9]+$" | jq -R . | jq -s -c > ../all-tags.json
        git ls-remote --tags origin | awk '{print $2}' | sed -e "s#^refs/tags/##" | grep -E "^v[1-9]+\.[0-9]+\.[0-9]+$" > ../all-tags.txt
        cat ../all-tags.txt
        cat ../all-tags.json
        echo "${{ hashFiles('all-tags.json') }}"
        echo "tags-list=$(cat ../all-tags.json)" >> $GITHUB_OUTPUT
        echo "tags-hash=${{ hashFiles('all-tags.json') }}" >> $GITHUB_OUTPUT

    # if there is no new release version, use the NCS in cache
    - name: Restore the NCS Cache
      id: cache-primes
      uses: actions/cache/restore@v3
      with:
        key: ${{ runner.OS }}-NCS-cache-${{ hashFiles('all-tags.json') }}
        path: ./ncs

    # if there is a new release version, the cache key will change. Fetch the newest NCS.
    - name: Get the NCS and Save
      id: update-ncs-cache
      if: steps.cache-primes.outputs.cache-hit != 'true'
      run: |
        mkdir ncs 
        cd ncs
        west init -m https://github.com/nrfconnect/sdk-nrf --mr main
        for version in $(cat ../all-tags.txt); do
          cd nrf
          git checkout $version
          west update
          cd ..
        done
        echo "ncs-updated=true" >> $GITHUB_OUTPUT
    
    - name: Cache the NCS
      if: steps.cache-primes.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ./ncs
        key: ${{ runner.OS }}-NCS-cache-${{ hashFiles('all-tags.json') }}

    - name:  Get all repo's URL
      id: process-west-list
      run: |
        chmod a+x get-all-repos.sh
        cd ncs

        for version in $(cat ../all-tags.txt); do
          cd nrf
          git checkout $version
          cd ..

          west update
          west forall -c "$(pwd)/../get-all-repos.sh"  
        done
        

    - name: Merge repo url list
      run: |
        cat ~/repo-list-raw.txt | sort -f | uniq > ~/repo-list.txt
        cat ~/repo-list.txt
        echo "==================="
        chmod a+x merge-to-json.sh
        ./merge-to-json.sh ~/repo-list.txt
        cat ~/merge.json
        echo "repo-list-json=$(cat ~/merge.json | jq -c)" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v3
      with:
        name: all-repos.json
        path: ~/merge.json
        retention-days: 5


    outputs:
      tags-list: ${{ steps.process-nrf-tags.outputs.tags-list }}
      tags-hash: ${{ steps.process-nrf-tags.outputs.tags-hash }}
      ncs-updated: ${{ steps.update-ncs-cache.outputs.ncs-updated }}

  # create-gitee-repo:
  #   name: Create repo on Gitee
  #   needs: [ merge-repo-name-list, get-list ]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       repo-name: ${{ fromJson(needs.merge-repo-name-list.outputs.repo-list) }}

  #   steps:
  #   - name: use gitee REST API to create remote Repos
  #     if: needs.get-list.outputs.ncs-updated == 'true'
  #     run: |
  #       curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos' -d '{"access_token":"${{ env.GITEE_TOKEN }}","name":"${{ matrix.repo-name }}","has_issues":"false","has_wiki":"false","can_comment":"false","path":"${{ matrix.repo-name }}","private":"false"}'
  

  # push-to-gitee:
  #   name: Push repos to gitee
  #   needs: [ create-gitee-repo, get-list ]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       tags: ${{ fromJson(needs.get-list.outputs.tags-list) }}
    
  #   steps:
  #   - name: Use Python version ${{ env.PYTHON_VER }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ env.PYTHON_VER }}
    
  #   - run: |
  #       pip3 install --user west
  #       export PATH=~/.local/bin:"$PATH"

  #       sudo apt-get install -y jq

  #       sudo timedatectl set-timezone "Asia/Shanghai"
  #       mkdir -p ~/.ssh/
  #       echo "${{ env.GITEE_PRI }}" > ~/.ssh/id_ed25519
  #       chmod 600 ~/.ssh/id_ed25519
  #       echo "Host gitee.com" >> ~/.ssh/config
  #       echo "    HostName gitee.com" >> ~/.ssh/config
  #       echo "    User git" >> ~/.ssh/config
  #       echo "    IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
  #       echo "    IdentitiesOnly yes" >> ~/.ssh/config
  #       ssh-keyscan gitee.com >> ~/.ssh/known_hosts
  #       git config --global user.name $GIT_USER
  #       git config --global user.email $GIT_EMAIL
        


  #   # get all tags of release version, convert them to json array
  #   - name: Get all release tags in sdk-nrf
  #     run: |
  #       mkdir -p sdk-nrf && cd sdk-nrf
  #       git init
  #       git remote add origin https://github.com/nrfconnect/sdk-nrf.git
  #       git ls-remote --tags origin | awk '{print $2}' | sed -e "s#^refs/tags/##" | grep -E "^v[1-9]+\.[0-9]+\.[0-9]+$" | jq -R . | jq -s -c > ~/all-tags.json

  #   # if there is no new release version, use the NCS in cache
  #   - name: Restore the NCS
  #     id: cache-primes
  #     uses: actions/cache/restore@v3
  #     with:
  #       key: ${{ runner.OS }}-NCS-cache-${{ needs.get-list.outputs.tags-hash }}
  #       path: ./ncs

  #   # if there is new release version, the cache key will change. Fetch the newest NCS.
  #   - name: Get the NCS
  #     if: steps.cache-primes.outputs.cache-hit != 'true'
  #     run: |
  #       mkdir ncs
  #       cd ncs
  #       west init -m https://github.com/nrfconnect/sdk-nrf --mr main
  #       west update

  #   - name: push all repos
  #     run: |
  #       cd ncs/nrf
  #       echo "Now in: $(pwd)"
  #       git checkout ${{ matrix.tags }}
  #       west update
  #       cd ..
  #       echo "===="
  #       echo "Now in: $(pwd)"

  #       echo "#!/bin/bash -v" > push-to-gitee.sh
  #       echo "name=\$(git remote -v | awk '{print \$2}' | grep -E '^https' | uniq | sed -e 's#^https://github.com/.\+/##')" >> push-to-gitee.sh
  #       echo "git remote add gitee git@gitee.com:${{ env.GITEE_USER }}/\$name" >>  push-to-gitee.sh
  #       echo "git remote -v" >>  push-to-gitee.sh
  #       echo "git push gitee HEAD:refs/tags/NCS-${{ matrix.tags }}"  >>  push-to-gitee.sh
  #       echo "git checkout `git rev-list --max-parents=0 HEAD | tail -n 1`"  >>  push-to-gitee.sh
  #       echo "git checkout -b init"  >>  push-to-gitee.sh
  #       echo "git push gitee HEAD:refs/heads/init"  >>  push-to-gitee.sh

  #       chmod a+x push-to-gitee.sh

  #       echo "==== will excute script below ===="
  #       cat push-to-gitee.sh
  #       echo "=================================="

  #       west forall -c "$(pwd)/push-to-gitee.sh"

        