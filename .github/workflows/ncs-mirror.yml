name: Gitee repos mirror periodic job for NCS
on:
  push:
  #每天北京时间早上七点运行
  #schedule:  
  #- cron: '0 23 * * *'
env:
  PYTHON_VER: 3.8
  GITEE_USER: jayant97
  GITEE_TOKEN: ${{ secrets.GITEE_API_TOKEN }}
  GITEE_PRI: ${{ secrets.GITEE_SSH_PRV }}
  GIT_USER: Jayant.Tang
  GIT_EMAIL: jayant.tang@nordicsemi.no

jobs:

  # Get all repo names in sdk-nrf/west.yaml (which includes sdk-zephyr/west.yaml), convert them to json array
  get-repo-list:
    name: Get all repos name in NCS west.yaml
    runs-on: ubuntu-latest
    
    steps:
    - name: Use Python version ${{ env.PYTHON_VER }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VER }}
    
    - run: |
        pip3 install --user west
        export PATH=~/.local/bin:"$PATH"
        sudo apt-get install -y jq

    # get all tags of release version, convert them to json array
    - name: Get all release tags in sdk-nrf
      id: process-nrf-tags
      run: |
        mkdir -p sdk-nrf && cd sdk-nrf
        git init
        git remote add origin https://github.com/nrfconnect/sdk-nrf.git
        git ls-remote --tags origin | awk '{print $2}' | sed -e "s#^refs/tags/##" | grep -E "^v[1-9]+\.[0-9]+\.[0-9]+$" | jq -R . | jq -s -c > ../../all-tags.json
        echo "tags-list=$(cat ../../all-tags.json)" >> $GITHUB_OUTPUT

    # if there is no new release version, use the NCS in cache
    - name: Restore the NCS Cache
      id: cache-primes
      uses: actions/cache/restore@v3
      with:
        key: ${{ runner.OS }}-NCS-cache-${{ hashFiles('all-tags.json') }}
        path: ./ncs

    # if there is new release version, the cache key will change. Fetch the newest NCS.
    - name: Get the NCS
      if: steps.cache-primes.outputs.cache-hit != 'true'
      run: |
        mkdir ncs 
        cd ncs
        west init -m https://github.com/nrfconnect/sdk-nrf --mr main
        west update
    
    - name: Cache the NCS
      if: steps.cache-primes.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ./ncs
        key: ${{ runner.OS }}-NCS-cache-${{ hashFiles('all-tags.json') }}

    - name: Process the west list text, set them as output
      id: process-west-list
      run: |
        cd ncs/nrf
        pwd
        ls -la
        echo "===="
        ls -la ..
        echo "===="
        ls -la ../..
        git fetch
        git checkout main
        west update
        echo "repo-list=$(west list -f "{url}" | sed "1d" | sed -e "s#^https://github.com/.\+/##" | jq -R .| jq -s -c)" >> $GITHUB_OUTPUT
    
    outputs:
      repo-list: ${{ steps.process-west-list.outputs.repo-list }}
      tags-list: ${{ steps.process-nrf-tags.outputs.tags-list }}

  # 第二个任务通过Gitee API 创建仓库（gitee只允许创建私有仓库），若仓库已存在则不会重复创建，curl命令不会失败
  create-gitee-repo:
    name: Create repo on Gitee
    needs: [ get-repo-list ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo-name: ${{ fromJson(needs.get-repo-list.outputs.repo-list) }}

    steps:
    - name: use gitee REST API to create remote Repos
      run: |
        curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos' -d '{"access_token":"#GITEE_TOKEN","name":"${{ matrix.repo-name }}","has_issues":"false","has_wiki":"false","can_comment":"false","path":"${{ matrix.repo-name }}","private":"false"}'
  
  # 第三个任务推送所有仓库的commit
  push-to-gitee:
    name: Push repos to gitee
    needs: [ create-gitee-repo, get-repo-list ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tags: ${{ fromJson(needs.get-repo-list.outputs.tags-list) }}
    
    steps:
    - name: Use Python version ${{ env.PYTHON_VER }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VER }}
    
    - run: |
        pip3 install --user west
        export PATH=~/.local/bin:"$PATH"

        sudo apt-get install -y jq

        sudo timedatectl set-timezone "Asia/Shanghai"
        mkdir -p ~/.ssh/
        echo "$GITEE_PRI" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        echo "Host gitee.com" >> ~/.ssh/config
        echo "    HostName gitee.com" >> ~/.ssh/config
        echo "    User git" >> ~/.ssh/config
        echo "    IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
        echo "    IdentitiesOnly yes" >> ~/.ssh/config
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        git config --global user.name $GIT_USER
        git config --global user.email $GIT_EMAIL
        


    # get all tags of release version, convert them to json array
    - name: Get all release tags in sdk-nrf
      run: |
        mkdir -p sdk-nrf && cd sdk-nrf
        git init
        git remote add origin https://github.com/nrfconnect/sdk-nrf.git
        git ls-remote --tags origin | awk '{print $2}' | sed -e "s#^refs/tags/##" | grep -E "^v[1-9]+\.[0-9]+\.[0-9]+$" | jq -R . | jq -s -c > ../../all-tags.json

    # if there is no new release version, use the NCS in cache
    - name: Restore the NCS
      id: cache-primes-2
      uses: actions/cache/restore@v3
      with:
        key: ${{ runner.OS }}-NCS-cache-${{ hashFiles('all-tags.json') }}
        path: ./ncs

    # if there is new release version, the cache key will change. Fetch the newest NCS.
    - name: Get the NCS
      if: steps.cache-primes-2.outputs.cache-hit != 'true'
      run: |
        mkdir ncs
        cd ncs
        west init -m https://github.com/nrfconnect/sdk-nrf --mr main
        west update
        
    - name: push all repos
      run:
        pwd
        ls -la
        cd ncs/nrf
        pwd
        ls -la
        west update
        cd ..
        west forall -c "west list -f '{url}' . | grep -E '^https:' && git remote add gitee git@gitee.com:$GITEE_USER/$(west list -f '{url}' .| sed -e "s#^https://github.com/.\+/##" )" 2> /dev/null
        west forall -c "git push gitee HEAD:refs/heads/gitee-mirror"

        