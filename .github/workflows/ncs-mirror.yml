name: Gitee repos mirror periodic job for NCS
on:
  push:
  
  # #每天北京时间早上七点运行
  # schedule:  
  # - cron: '0 23 * * *'
  
env:
  PYTHON_VER: 3.8
  GITEE_USER: jayant97
  GITEE_TOKEN: ${{ secrets.GITEE_API_TOKEN }}
  GITEE_PRI: ${{ secrets.GITEE_SSH_PRV }}
  GIT_USER: Jayant.Tang
  GIT_EMAIL: jayant.tang@nordicsemi.no
  NCS_MANIFEST: https://github.com/nrfconnect/sdk-nrf.git

jobs:

  get-list:
    name: Sync all NCS repos to Gitee
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Python version ${{ env.PYTHON_VER }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VER }}
    
    - name: install dependencies
      run: |
        pip3 install --user west
        export PATH=~/.local/bin:"$PATH"
        sudo apt-get install -y jq

    - name: Get all release tags in sdk-nrf
      id: process-nrf-tags
      run: |
        echo "${{ github.server_url }}/${{ github.repository }}"
        mkdir -p sdk-nrf
        cd sdk-nrf
        git init
        git remote add origin ${{ env.NCS_MANIFEST }}
        git ls-remote --tags origin | awk '{print $2}' | sed -e "s#^refs/tags/##" | grep -E "^v[1-9]+\.[0-9]+\.[0-9]+$" | jq -R . | jq -s -c > ../all-tags.json
        git ls-remote --tags origin | awk '{print $2}' | sed -e "s#^refs/tags/##" | grep -E "^v[1-9]+\.[0-9]+\.[0-9]+$" > ../all-tags.txt
        cat ../all-tags.txt
        cat ../all-tags.json
        echo "${{ hashFiles('all-tags.json') }}"
        echo "tags-list=$(cat ../all-tags.json)" >> $GITHUB_OUTPUT
        echo "tags-hash=${{ hashFiles('all-tags.json') }}" >> $GITHUB_OUTPUT

    # if there is no new release version, use the NCS in cache
    - name: Restore the NCS Cache
      id: cache-primes
      uses: actions/cache/restore@v3
      with:
        key: ${{ runner.OS }}-NCS-cache-${{ hashFiles('all-tags.json') }}
        path: ./ncs

    # if there is a new release version, the cache key will change. Fetch the newest NCS.
    - name: Get the latest NCS and Save
      id: update-ncs-cache
      if: steps.cache-primes.outputs.cache-hit != 'true'
      run: |
        mkdir ncs 
        cd ncs
        latest_version=$( cat ../all-tags.txt | sort | tail -n 1)
        echo $latest_version
        west init -m ${{ env.NCS_MANIFEST }} --mr $latest_version
        for version in $(cat ../all-tags.txt); do
          echo "========== version:$version =========="
          cd nrf
          git checkout $version
          west update
          cd ..
        done
        echo "ncs-updated=true" >> $GITHUB_OUTPUT
    
    - name: Cache the NCS
      if: steps.cache-primes.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ./ncs
        key: ${{ runner.OS }}-NCS-cache-${{ hashFiles('all-tags.json') }}

    - name:  Get all repo's URL
      id: process-west-list
      run: |
        cd ncs

        echo "${{ env.NCS_MANIFEST }}" > ~/repo-list-raw.txt

        for version in $(cat ../all-tags.txt); do
          cd nrf
          echo "========== version:$version =========="
          git checkout $version
          cd ..
          west update
          west list -f "{url}" | grep -E "^https://" >> ~/repo-list-raw.txt
          west forall -c "git submodule foreach --recursive \"git remote -v | awk '{print \\\$2}' | sed 's#\\\\.git##' | uniq >> ~/repo-list-raw.txt\"" 
        done
        

    - name: Merge repo url list
      run: |
        cat ~/repo-list-raw.txt | sort -f | uniq > ~/repo-list.txt
        cat ~/repo-list.txt
        echo "==================="
        chmod a+x merge-to-json.sh
        ./merge-to-json.sh ~/repo-list.txt
        cat ~/merge.json
        echo "repo-list-json=$(cat ~/merge.json | jq -c)" >> $GITHUB_OUTPUT

    - name: Create Repo on Gitee
      if: steps.cache-primes.outputs.cache-hit != 'true'
      run: |
        cat ~/merge.json | jq '.[].repo' | sed "s#\"\(.\+\)\"#\1#" \
        | while read line; do
          echo ""
          echo "========== create $line =========="
          
          # Delete the repo
          # curl --connect-timeout 15 --max-time 30 --retry 3 \
          # -X DELETE --header 'Content-Type: application/json;charset=UTF-8' "https://gitee.com/api/v5/repos/${{ env.GITEE_USER }}/$line?access_token=${{ env.GITEE_TOKEN }}"
          
          # Creeate the repo
          curl --connect-timeout 15 --max-time 30 --retry 3 --retry-delay 2 -X POST \
          --header 'Content-Type: application/json;charset=UTF-8' \
          'https://gitee.com/api/v5/user/repos' \
          -d '{"access_token":"${{ env.GITEE_TOKEN }}","name":"'$line'","description":"这是一个镜像仓库，定时同步更新。详情请参考${{ github.server_url }}/${{ github.repository }}","has_issues":"false","has_wiki":"false","can_comment":"false","auto_init":"false","path":"'$line'","private":"true"}'
          
          sleep 2
        done
    
    - name: Prepare Private Keys
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai"
        mkdir -p ~/.ssh/
        echo "${{ env.GITEE_PRI }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        echo "Host gitee.com" >> ~/.ssh/config
        echo "    HostName gitee.com" >> ~/.ssh/config
        echo "    User git" >> ~/.ssh/config
        echo "    IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
        echo "    IdentitiesOnly yes" >> ~/.ssh/config
        ssh-keyscan gitee.com >> ~/.ssh/known_hosts
        git config --global user.name $GIT_USER
        git config --global user.email $GIT_EMAIL

    - name: Sync every version to Gitee
      run: |
        chmod a+x push-to-gitee.sh
        cd ncs

        for version in $(cat ../all-tags.txt); do
          echo "========== version:$version =========="
          
          cd nrf
          git checkout $version
          cd ..

          west update
          west forall -c "$(pwd)/../push-to-gitee.sh $version $GITEE_USER"
          west forall -c "git submodule foreach --recursive \"$(pwd)/../push-to-gitee.sh $version $GITEE_USER\""

        done
        
        # change repo type to public
        cat ~/merge.json | jq '.[].repo' | sed "s#\"\(.\+\)\"#\1#" \
        | while read line; do
          curl --connect-timeout 15 --max-time 30 --retry 3 -X PATCH --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/${{ env.GITEE_USER }}/'$line'' \
          -d '{"access_token":"${{ env.GITEE_TOKEN }}","name":"'$line'","has_issues":"false","has_wiki":"false","can_comment":"false","private":"false"}'
          sleep 1
        done

    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: all-repos.json
    #     path: ~/merge.json
    #     retention-days: 5

    outputs:
      tags-list: ${{ steps.process-nrf-tags.outputs.tags-list }}
      tags-hash: ${{ steps.process-nrf-tags.outputs.tags-hash }}
      ncs-updated: ${{ steps.update-ncs-cache.outputs.ncs-updated }}
